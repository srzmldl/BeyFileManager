var filesUploadedQuantity ;//已经被上传的文件碎片数目
var serverController = [];
var availableServerQuantity;//可用的服务器数量
var filesUploadList = [];
/*example:
var filesUploadList=[
{"filename":"file1","uploadedTimes":0,"originalMd5","0"}
{"filename":"file2","uploadedTimes":1,"originalMd5","0"}
]
*/
function calculateMd5(){
	var i;
	for ( i=0 ; i<filesUploadList.length ; i++ ){
		//计算每个碎片的MD5码
		//存在filesUploadList[i].originalMd5
	}

}

function getBestUrl(serverChoose){//约定填充可用url时先填入urlone，urlone填过了再填urltwo,相应地，优先取urltwo,再取urlone
	var x;
	var bestUrl;
	x=serverChoose;//窝只是为了不要每次都从第一个服务器开始找可用的url，所以设了一个serverChoose
	while( availableServerQuantity ){
		if( serverController[x].urltwo != 0){
			bestUrl = serverController[x].urltwo;
			serverController[x].urltwo = 0;
			break;
		}
		else if( serverController[x].urlone != 0){
			bestUrl = serverController[x].urlone;
			serverController[x].urlone = 0;
			availableServerQuantity --;
			break;
		}
		x++;
		x %= serverController.length;		
	}

}

//回调函数需要处理的有：检查是否上传成功，校验文件，选择重新上传or更新已上传次数
//检查文件的md5 sha1以做校验用
function uploadAccomplished(uploadServer,fileToUpload ){//fileToUpload是
	if ( uploadServer == "sina" )
		return judgeSinaUploadSuccess (fileToUpload);
	else if ( uploadServer == "jinshan" )
		return judgeJinShanUploadSuccess (fileToUpload);
	//......
}
function getUploadedMd5(uploadServer){
	if( uploadServer == "sina" ){
		;//...
	}
	else if ( uploadServer == "jinshan") {
		//...
	}
}
function uploadCallback(dataForm, uploadServer,fileToUpload,targetUploadTimes){//fileToUpload:当前上传的文件碎片在filesUploadList里的编号

	//在单个碎片的上传请求完成后调用的回调函数
	var uploadedMd5;
	var uploadSuccess = true;//记录是否上传成功

	if ( !uploadAccomplished() )//判断是否上传完成
		uploadSuccess = false;

	uploadedMd5 = getUploadedMd5 (uploadServer);//查询上传完成后的md5码
	if ( filesUploadList[fileToUpload].originalMd5 !== uploadedMd5)//判断上传前后的md5码是否相同
		uploadSuccess = false;

	if( uploadSuccess ){// 上传完成且校验码相符，认为上传成功，上传次数+=0.5
		filesUploadList[fileToUpload].uploadedTimes += 0.5;
		if( filesUploadList[fileToUpload].uploadedTimes == targetUploadTimes)
			filesUploadedQuantity ++;
	}
	else
		postHandlerByAJAX (url,dataForm,fileToUpload,targetUploadTimes);//不成功则重新传一次
}

function uploadManagerForOnce (targetUploadTimes){
	var minUploadedTimes;
	var fileToUpload; //被选中的当前要上传的碎片编号
	var serverChoose=0;//这是个用来避免每次查询可用服务器时，都从第一个可用服务器开始查询
	var i;
	filesUploadedQuantity = 0;

	//初始将所有碎片从0号开始依次都抛给服务器一遍（初始上传次数大家都是0，没必要一个个找上传次数最少的）
	i=0,serverChoose=0 ;
	while( i<filesUploadList.length ){
		if( availableServerQuantity !== 0 ){
			fileToUpload = i;
			serverChoose++;
			url= getBestUrl( serverChoose );//获取一个可用服务器,初期是找可用的url,后期改成找最快的
			filesUploadList[fileToUpload].uploadedTimes += 0.5;//文件列表规则为：已上传的加1，正在上传的加0.5
			//此处加0.5, 代表正在上传；postHandlerByAJAX监测文件传完后再加0.5，代表上传成功

			postHandlerByAJAX (url,dataForm,fileToUpload,targetUploadTimes);//调用包装好的post put请求
			i++;
		}
		else{
			setTimeout({}, 50);
		}
	}
	while( filesUploadedQuantity <= filesUploadList.length ){/*并非所有文件都上传过一次*/
		if( availableServerQuantity !== 0 ){
			//先从filesUploadList列表中获取需要上传的一个文件（要求，上传次数最少）
			minUploadedTimes = 10000；
			for( i=0 ; i<filesUploadList.length ; i++ )
				if( filesUploadList[i].uploadedTimes < minUploadedTimes ){
					fileToUpload = i ;
					minUploadedTimes = filesUploadList[i].uploadedTimes ;
				}
			//以下这段同前一个while循环里语句的意义						
			serverChoose++;
			url = getBestUrl(serverChoose); 
			filesUploadList[fileToUpload].uploadedTimes += 0.5;
			postHandlerByAJAX (url,dataForm,fileToUpload,targetUploadTimes);
		}
		else{
			setTimeout({}, 50);
			//sleep一段时间再查询
		}
	}
}

function uploadManager(dataForm){
	"strict mode"
	var response;
	var i;
	//初始化待上传文件列表
	for ( i=0 ; i<filesUploadList.length ; i++ )
		file[i].uploadedTimes = 0;
	calculateMd5 ();
	//初始化可上传服务器列表
	availableServerQuantity = 0;
	this.serverController = [
		//每个可上传服务器最多同时上传两个文件
		{"serverName" : baidu , "availableDownloadUrls":2, "urlone" : 0, "urltwo" : 0},
		{"serverName" : sina , "availableDownloadUrls":2, "urlone" : 0, "urltwo" : 0},
		{"serverName" : jinshan ,"availableDownloadUrls":2, "urlone" : 0, "urltwo" : 0}
		];
	this.returnInformation = null;

	uploadManagerForOnce(1);
	if( filesUploadedQuantity === filesUploadList.length ){/*所有文件都已经上传过一次了*/
		//提示用户，请问是否停止
		response=confirm("All the files have been uploaded at least once, continue to upload?");
		if ( response === true ){
  			alert("You chose continue to upload!");
  			uploadManagerForOnce(2);	
  			}
		else{
  			alert("You chose stop uploading!");
  		}
	}
	//上传结束，返回保存信息
	this.returnInformation = []

};